
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000081c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f8  00800100  00800100  0000081c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000084c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ab3  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c67  00000000  00000000  0000251f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e89  00000000  00000000  00003186  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b8  00000000  00000000  00004010  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000795  00000000  00000000  000044c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001116  00000000  00000000  00004c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00005d73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__ctors_end>
   4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
   8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
   c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  10:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  14:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  18:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  1c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  20:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  24:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  28:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  2c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  30:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  34:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  38:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  3c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  40:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  44:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  48:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  4c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  50:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  54:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  58:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  5c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  60:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__vector_24>
  64:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
  68:	07 03       	mulsu	r16, r23
  6a:	0b 03       	fmul	r16, r19
  6c:	0b 03       	fmul	r16, r19
  6e:	0b 03       	fmul	r16, r19
  70:	0b 03       	fmul	r16, r19
  72:	0b 03       	fmul	r16, r19
  74:	0b 03       	fmul	r16, r19
  76:	0b 03       	fmul	r16, r19
  78:	0f 02       	muls	r16, r31
  7a:	0b 03       	fmul	r16, r19
  7c:	0b 03       	fmul	r16, r19
  7e:	0b 03       	fmul	r16, r19
  80:	0b 03       	fmul	r16, r19
  82:	0b 03       	fmul	r16, r19
  84:	0b 03       	fmul	r16, r19
  86:	0b 03       	fmul	r16, r19
  88:	0f 02       	muls	r16, r31
  8a:	0b 03       	fmul	r16, r19
  8c:	0b 03       	fmul	r16, r19
  8e:	0b 03       	fmul	r16, r19
  90:	0b 03       	fmul	r16, r19
  92:	0b 03       	fmul	r16, r19
  94:	0b 03       	fmul	r16, r19
  96:	0b 03       	fmul	r16, r19
  98:	17 02       	muls	r17, r23
  9a:	0b 03       	fmul	r16, r19
  9c:	0b 03       	fmul	r16, r19
  9e:	0b 03       	fmul	r16, r19
  a0:	0b 03       	fmul	r16, r19
  a2:	0b 03       	fmul	r16, r19
  a4:	0b 03       	fmul	r16, r19
  a6:	0b 03       	fmul	r16, r19
  a8:	3d 02       	muls	r19, r29
  aa:	0b 03       	fmul	r16, r19
  ac:	0b 03       	fmul	r16, r19
  ae:	0b 03       	fmul	r16, r19
  b0:	0b 03       	fmul	r16, r19
  b2:	0b 03       	fmul	r16, r19
  b4:	0b 03       	fmul	r16, r19
  b6:	0b 03       	fmul	r16, r19
  b8:	17 02       	muls	r17, r23
  ba:	0b 03       	fmul	r16, r19
  bc:	0b 03       	fmul	r16, r19
  be:	0b 03       	fmul	r16, r19
  c0:	0b 03       	fmul	r16, r19
  c2:	0b 03       	fmul	r16, r19
  c4:	0b 03       	fmul	r16, r19
  c6:	0b 03       	fmul	r16, r19
  c8:	43 02       	muls	r20, r19
  ca:	0b 03       	fmul	r16, r19
  cc:	0b 03       	fmul	r16, r19
  ce:	0b 03       	fmul	r16, r19
  d0:	0b 03       	fmul	r16, r19
  d2:	0b 03       	fmul	r16, r19
  d4:	0b 03       	fmul	r16, r19
  d6:	0b 03       	fmul	r16, r19
  d8:	49 02       	muls	r20, r25
  da:	0b 03       	fmul	r16, r19
  dc:	0b 03       	fmul	r16, r19
  de:	0b 03       	fmul	r16, r19
  e0:	0b 03       	fmul	r16, r19
  e2:	0b 03       	fmul	r16, r19
  e4:	0b 03       	fmul	r16, r19
  e6:	0b 03       	fmul	r16, r19
  e8:	5b 02       	muls	r21, r27
  ea:	0b 03       	fmul	r16, r19
  ec:	0b 03       	fmul	r16, r19
  ee:	0b 03       	fmul	r16, r19
  f0:	0b 03       	fmul	r16, r19
  f2:	0b 03       	fmul	r16, r19
  f4:	0b 03       	fmul	r16, r19
  f6:	0b 03       	fmul	r16, r19
  f8:	85 02       	muls	r24, r21
  fa:	0b 03       	fmul	r16, r19
  fc:	0b 03       	fmul	r16, r19
  fe:	0b 03       	fmul	r16, r19
 100:	0b 03       	fmul	r16, r19
 102:	0b 03       	fmul	r16, r19
 104:	0b 03       	fmul	r16, r19
 106:	0b 03       	fmul	r16, r19
 108:	4f 02       	muls	r20, r31
 10a:	0b 03       	fmul	r16, r19
 10c:	0b 03       	fmul	r16, r19
 10e:	0b 03       	fmul	r16, r19
 110:	0b 03       	fmul	r16, r19
 112:	0b 03       	fmul	r16, r19
 114:	0b 03       	fmul	r16, r19
 116:	0b 03       	fmul	r16, r19
 118:	69 02       	muls	r22, r25
 11a:	0b 03       	fmul	r16, r19
 11c:	0b 03       	fmul	r16, r19
 11e:	0b 03       	fmul	r16, r19
 120:	0b 03       	fmul	r16, r19
 122:	0b 03       	fmul	r16, r19
 124:	0b 03       	fmul	r16, r19
 126:	0b 03       	fmul	r16, r19
 128:	88 02       	muls	r24, r24
 12a:	0b 03       	fmul	r16, r19
 12c:	0b 03       	fmul	r16, r19
 12e:	0b 03       	fmul	r16, r19
 130:	0b 03       	fmul	r16, r19
 132:	0b 03       	fmul	r16, r19
 134:	0b 03       	fmul	r16, r19
 136:	0b 03       	fmul	r16, r19
 138:	88 02       	muls	r24, r24
 13a:	0b 03       	fmul	r16, r19
 13c:	0b 03       	fmul	r16, r19
 13e:	0b 03       	fmul	r16, r19
 140:	0b 03       	fmul	r16, r19
 142:	0b 03       	fmul	r16, r19
 144:	0b 03       	fmul	r16, r19
 146:	0b 03       	fmul	r16, r19
 148:	88 02       	muls	r24, r24
 14a:	0b 03       	fmul	r16, r19
 14c:	0b 03       	fmul	r16, r19
 14e:	0b 03       	fmul	r16, r19
 150:	0b 03       	fmul	r16, r19
 152:	0b 03       	fmul	r16, r19
 154:	0b 03       	fmul	r16, r19
 156:	0b 03       	fmul	r16, r19
 158:	88 02       	muls	r24, r24
 15a:	0b 03       	fmul	r16, r19
 15c:	0b 03       	fmul	r16, r19
 15e:	0b 03       	fmul	r16, r19
 160:	0b 03       	fmul	r16, r19
 162:	0b 03       	fmul	r16, r19
 164:	0b 03       	fmul	r16, r19
 166:	0b 03       	fmul	r16, r19
 168:	91 02       	muls	r25, r17
 16a:	0b 03       	fmul	r16, r19
 16c:	0b 03       	fmul	r16, r19
 16e:	0b 03       	fmul	r16, r19
 170:	0b 03       	fmul	r16, r19
 172:	0b 03       	fmul	r16, r19
 174:	0b 03       	fmul	r16, r19
 176:	0b 03       	fmul	r16, r19
 178:	c9 02       	muls	r28, r25
 17a:	0b 03       	fmul	r16, r19
 17c:	0b 03       	fmul	r16, r19
 17e:	0b 03       	fmul	r16, r19
 180:	0b 03       	fmul	r16, r19
 182:	0b 03       	fmul	r16, r19
 184:	0b 03       	fmul	r16, r19
 186:	0b 03       	fmul	r16, r19
 188:	91 02       	muls	r25, r17
 18a:	0b 03       	fmul	r16, r19
 18c:	0b 03       	fmul	r16, r19
 18e:	0b 03       	fmul	r16, r19
 190:	0b 03       	fmul	r16, r19
 192:	0b 03       	fmul	r16, r19
 194:	0b 03       	fmul	r16, r19
 196:	0b 03       	fmul	r16, r19
 198:	c9 02       	muls	r28, r25
 19a:	0b 03       	fmul	r16, r19
 19c:	0b 03       	fmul	r16, r19
 19e:	0b 03       	fmul	r16, r19
 1a0:	0b 03       	fmul	r16, r19
 1a2:	0b 03       	fmul	r16, r19
 1a4:	0b 03       	fmul	r16, r19
 1a6:	0b 03       	fmul	r16, r19
 1a8:	ad 02       	muls	r26, r29
 1aa:	0b 03       	fmul	r16, r19
 1ac:	0b 03       	fmul	r16, r19
 1ae:	0b 03       	fmul	r16, r19
 1b0:	0b 03       	fmul	r16, r19
 1b2:	0b 03       	fmul	r16, r19
 1b4:	0b 03       	fmul	r16, r19
 1b6:	0b 03       	fmul	r16, r19
 1b8:	cd 02       	muls	r28, r29
 1ba:	0b 03       	fmul	r16, r19
 1bc:	0b 03       	fmul	r16, r19
 1be:	0b 03       	fmul	r16, r19
 1c0:	0b 03       	fmul	r16, r19
 1c2:	0b 03       	fmul	r16, r19
 1c4:	0b 03       	fmul	r16, r19
 1c6:	0b 03       	fmul	r16, r19
 1c8:	cd 02       	muls	r28, r29
 1ca:	0b 03       	fmul	r16, r19
 1cc:	0b 03       	fmul	r16, r19
 1ce:	0b 03       	fmul	r16, r19
 1d0:	0b 03       	fmul	r16, r19
 1d2:	0b 03       	fmul	r16, r19
 1d4:	0b 03       	fmul	r16, r19
 1d6:	0b 03       	fmul	r16, r19
 1d8:	e4 02       	muls	r30, r20
 1da:	0b 03       	fmul	r16, r19
 1dc:	0b 03       	fmul	r16, r19
 1de:	0b 03       	fmul	r16, r19
 1e0:	0b 03       	fmul	r16, r19
 1e2:	0b 03       	fmul	r16, r19
 1e4:	0b 03       	fmul	r16, r19
 1e6:	0b 03       	fmul	r16, r19
 1e8:	01 03       	mulsu	r16, r17
 1ea:	0b 03       	fmul	r16, r19
 1ec:	0b 03       	fmul	r16, r19
 1ee:	0b 03       	fmul	r16, r19
 1f0:	0b 03       	fmul	r16, r19
 1f2:	0b 03       	fmul	r16, r19
 1f4:	0b 03       	fmul	r16, r19
 1f6:	0b 03       	fmul	r16, r19
 1f8:	01 03       	mulsu	r16, r17

000001fa <__ctors_end>:
 1fa:	11 24       	eor	r1, r1
 1fc:	1f be       	out	0x3f, r1	; 63
 1fe:	cf ef       	ldi	r28, 0xFF	; 255
 200:	d8 e0       	ldi	r29, 0x08	; 8
 202:	de bf       	out	0x3e, r29	; 62
 204:	cd bf       	out	0x3d, r28	; 61

00000206 <__do_clear_bss>:
 206:	21 e0       	ldi	r18, 0x01	; 1
 208:	a0 e0       	ldi	r26, 0x00	; 0
 20a:	b1 e0       	ldi	r27, 0x01	; 1
 20c:	01 c0       	rjmp	.+2      	; 0x210 <.do_clear_bss_start>

0000020e <.do_clear_bss_loop>:
 20e:	1d 92       	st	X+, r1

00000210 <.do_clear_bss_start>:
 210:	a8 3f       	cpi	r26, 0xF8	; 248
 212:	b2 07       	cpc	r27, r18
 214:	e1 f7       	brne	.-8      	; 0x20e <.do_clear_bss_loop>
 216:	0e 94 11 01 	call	0x222	; 0x222 <main>
 21a:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <_exit>

0000021e <__bad_interrupt>:
 21e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000222 <main>:
 #include <avr/interrupt.h>
 #define DEVICE (0b0100111) // Device address as specified in data sheet

int main(void)
{	
	PORTC &= ~(1 << PINC4 | 1 << PINC5);
 222:	88 b1       	in	r24, 0x08	; 8
 224:	8f 7c       	andi	r24, 0xCF	; 207
 226:	88 b9       	out	0x08, r24	; 8
	beginAsMaster();
 228:	0e 94 65 03 	call	0x6ca	; 0x6ca <beginAsMaster>
	sei();
 22c:	78 94       	sei
    initUSART();
 22e:	0e 94 1c 03 	call	0x638	; 0x638 <initUSART>
	
	beginTransmission(DEVICE);
 232:	87 e2       	ldi	r24, 0x27	; 39
 234:	0e 94 78 03 	call	0x6f0	; 0x6f0 <beginTransmission>
	write(0b01111001);
 238:	89 e7       	ldi	r24, 0x79	; 121
 23a:	0e 94 9f 03 	call	0x73e	; 0x73e <write>
	endTransmissionThenStop();
 23e:	0e 94 9b 03 	call	0x736	; 0x736 <endTransmissionThenStop>
 242:	ff cf       	rjmp	.-2      	; 0x242 <main+0x20>

00000244 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 244:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <twi_state>
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <twi_sendStop>
 24e:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <twi_inRepStart>
 252:	88 b1       	in	r24, 0x08	; 8
 254:	80 63       	ori	r24, 0x30	; 48
 256:	88 b9       	out	0x08, r24	; 8
 258:	e9 eb       	ldi	r30, 0xB9	; 185
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	8e 7f       	andi	r24, 0xFE	; 254
 260:	80 83       	st	Z, r24
 262:	80 81       	ld	r24, Z
 264:	8d 7f       	andi	r24, 0xFD	; 253
 266:	80 83       	st	Z, r24
 268:	88 e4       	ldi	r24, 0x48	; 72
 26a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 26e:	85 e4       	ldi	r24, 0x45	; 69
 270:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 274:	08 95       	ret

00000276 <twi_writeTo>:
 276:	0f 93       	push	r16
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	41 32       	cpi	r20, 0x21	; 33
 27e:	08 f0       	brcs	.+2      	; 0x282 <twi_writeTo+0xc>
 280:	5b c0       	rjmp	.+182    	; 0x338 <twi_writeTo+0xc2>
 282:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <twi_state>
 286:	31 11       	cpse	r19, r1
 288:	fc cf       	rjmp	.-8      	; 0x282 <twi_writeTo+0xc>
 28a:	92 e0       	ldi	r25, 0x02	; 2
 28c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <twi_state>
 290:	00 93 52 01 	sts	0x0152, r16	; 0x800152 <twi_sendStop>
 294:	9f ef       	ldi	r25, 0xFF	; 255
 296:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <twi_error>
 29a:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <twi_masterBufferIndex>
 29e:	40 93 0d 01 	sts	0x010D, r20	; 0x80010d <twi_masterBufferLength>
 2a2:	44 23       	and	r20, r20
 2a4:	91 f0       	breq	.+36     	; 0x2ca <twi_writeTo+0x54>
 2a6:	eb 01       	movw	r28, r22
 2a8:	41 50       	subi	r20, 0x01	; 1
 2aa:	50 e0       	ldi	r21, 0x00	; 0
 2ac:	4f 5f       	subi	r20, 0xFF	; 255
 2ae:	5f 4f       	sbci	r21, 0xFF	; 255
 2b0:	46 0f       	add	r20, r22
 2b2:	57 1f       	adc	r21, r23
 2b4:	fb 01       	movw	r30, r22
 2b6:	df 01       	movw	r26, r30
 2b8:	ac 1b       	sub	r26, r28
 2ba:	bd 0b       	sbc	r27, r29
 2bc:	91 91       	ld	r25, Z+
 2be:	ac 56       	subi	r26, 0x6C	; 108
 2c0:	be 4f       	sbci	r27, 0xFE	; 254
 2c2:	9c 93       	st	X, r25
 2c4:	e4 17       	cp	r30, r20
 2c6:	f5 07       	cpc	r31, r21
 2c8:	b1 f7       	brne	.-20     	; 0x2b6 <twi_writeTo+0x40>
 2ca:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <twi_slarw>
 2ce:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <twi_slarw>
 2d2:	88 0f       	add	r24, r24
 2d4:	89 2b       	or	r24, r25
 2d6:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <twi_slarw>
 2da:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <twi_inRepStart>
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	81 f4       	brne	.+32     	; 0x302 <twi_writeTo+0x8c>
 2e2:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <twi_inRepStart>
 2e6:	ab eb       	ldi	r26, 0xBB	; 187
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	ec eb       	ldi	r30, 0xBC	; 188
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <twi_slarw>
 2f2:	8c 93       	st	X, r24
 2f4:	80 81       	ld	r24, Z
 2f6:	83 fd       	sbrc	r24, 3
 2f8:	fa cf       	rjmp	.-12     	; 0x2ee <twi_writeTo+0x78>
 2fa:	85 ec       	ldi	r24, 0xC5	; 197
 2fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 300:	03 c0       	rjmp	.+6      	; 0x308 <twi_writeTo+0x92>
 302:	85 ee       	ldi	r24, 0xE5	; 229
 304:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 308:	22 23       	and	r18, r18
 30a:	41 f0       	breq	.+16     	; 0x31c <twi_writeTo+0xa6>
 30c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <twi_state>
 310:	82 30       	cpi	r24, 0x02	; 2
 312:	21 f4       	brne	.+8      	; 0x31c <twi_writeTo+0xa6>
 314:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <twi_state>
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	e1 f3       	breq	.-8      	; 0x314 <twi_writeTo+0x9e>
 31c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <twi_error>
 320:	8f 3f       	cpi	r24, 0xFF	; 255
 322:	79 f0       	breq	.+30     	; 0x342 <twi_writeTo+0xcc>
 324:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <twi_error>
 328:	80 32       	cpi	r24, 0x20	; 32
 32a:	41 f0       	breq	.+16     	; 0x33c <twi_writeTo+0xc6>
 32c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <twi_error>
 330:	80 33       	cpi	r24, 0x30	; 48
 332:	31 f0       	breq	.+12     	; 0x340 <twi_writeTo+0xca>
 334:	34 e0       	ldi	r19, 0x04	; 4
 336:	05 c0       	rjmp	.+10     	; 0x342 <twi_writeTo+0xcc>
 338:	31 e0       	ldi	r19, 0x01	; 1
 33a:	03 c0       	rjmp	.+6      	; 0x342 <twi_writeTo+0xcc>
 33c:	32 e0       	ldi	r19, 0x02	; 2
 33e:	01 c0       	rjmp	.+2      	; 0x342 <twi_writeTo+0xcc>
 340:	33 e0       	ldi	r19, 0x03	; 3
 342:	83 2f       	mov	r24, r19
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	0f 91       	pop	r16
 34a:	08 95       	ret

0000034c <twi_transmit>:
 34c:	40 91 51 01 	lds	r20, 0x0151	; 0x800151 <twi_txBufferLength>
 350:	26 2f       	mov	r18, r22
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	24 0f       	add	r18, r20
 356:	31 1d       	adc	r19, r1
 358:	21 32       	cpi	r18, 0x21	; 33
 35a:	31 05       	cpc	r19, r1
 35c:	0c f5       	brge	.+66     	; 0x3a0 <twi_transmit+0x54>
 35e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <twi_state>
 362:	24 30       	cpi	r18, 0x04	; 4
 364:	f9 f4       	brne	.+62     	; 0x3a4 <twi_transmit+0x58>
 366:	66 23       	and	r22, r22
 368:	a1 f0       	breq	.+40     	; 0x392 <twi_transmit+0x46>
 36a:	a8 2f       	mov	r26, r24
 36c:	b9 2f       	mov	r27, r25
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <twi_txBufferLength>
 376:	fc 01       	movw	r30, r24
 378:	e2 0f       	add	r30, r18
 37a:	f1 1d       	adc	r31, r1
 37c:	2d 91       	ld	r18, X+
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	ee 0f       	add	r30, r30
 382:	ff 1f       	adc	r31, r31
 384:	ed 5a       	subi	r30, 0xAD	; 173
 386:	fe 4f       	sbci	r31, 0xFE	; 254
 388:	31 83       	std	Z+1, r19	; 0x01
 38a:	20 83       	st	Z, r18
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	86 17       	cp	r24, r22
 390:	80 f3       	brcs	.-32     	; 0x372 <twi_transmit+0x26>
 392:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <twi_txBufferLength>
 396:	68 0f       	add	r22, r24
 398:	60 93 51 01 	sts	0x0151, r22	; 0x800151 <twi_txBufferLength>
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	08 95       	ret
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	08 95       	ret
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	08 95       	ret

000003a8 <twi_attachSlaveRxEvent>:
 3a8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <twi_onSlaveReceive+0x1>
 3ac:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <twi_onSlaveReceive>
 3b0:	08 95       	ret

000003b2 <twi_attachSlaveTxEvent>:
 3b2:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <twi_onSlaveTransmit+0x1>
 3b6:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <twi_onSlaveTransmit>
 3ba:	08 95       	ret

000003bc <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
 3bc:	85 ed       	ldi	r24, 0xD5	; 213
 3be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
 3c2:	ec eb       	ldi	r30, 0xBC	; 188
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	84 fd       	sbrc	r24, 4
 3ca:	fd cf       	rjmp	.-6      	; 0x3c6 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
 3cc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <twi_state>
 3d0:	08 95       	ret

000003d2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
 3d2:	85 ec       	ldi	r24, 0xC5	; 197
 3d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
 3d8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <twi_state>
 3dc:	08 95       	ret

000003de <__vector_24>:
}

ISR(TWI_vect)
{
 3de:	1f 92       	push	r1
 3e0:	0f 92       	push	r0
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	0f 92       	push	r0
 3e6:	11 24       	eor	r1, r1
 3e8:	2f 93       	push	r18
 3ea:	3f 93       	push	r19
 3ec:	4f 93       	push	r20
 3ee:	5f 93       	push	r21
 3f0:	6f 93       	push	r22
 3f2:	7f 93       	push	r23
 3f4:	8f 93       	push	r24
 3f6:	9f 93       	push	r25
 3f8:	af 93       	push	r26
 3fa:	bf 93       	push	r27
 3fc:	ef 93       	push	r30
 3fe:	ff 93       	push	r31
  switch(TW_STATUS){
 400:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 404:	e8 2f       	mov	r30, r24
 406:	e8 7f       	andi	r30, 0xF8	; 248
 408:	8e 2f       	mov	r24, r30
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	89 3c       	cpi	r24, 0xC9	; 201
 40e:	91 05       	cpc	r25, r1
 410:	08 f0       	brcs	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	01 c1       	rjmp	.+514    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 414:	fc 01       	movw	r30, r24
 416:	ec 5c       	subi	r30, 0xCC	; 204
 418:	ff 4f       	sbci	r31, 0xFF	; 255
 41a:	0c 94 cc 03 	jmp	0x798	; 0x798 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
 41e:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <twi_slarw>
 422:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 426:	85 ec       	ldi	r24, 0xC5	; 197
 428:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 42c:	f4 c0       	rjmp	.+488    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
 42e:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <twi_masterBufferIndex>
 432:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <twi_masterBufferLength>
 436:	98 17       	cp	r25, r24
 438:	80 f4       	brcc	.+32     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 43a:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <twi_masterBufferIndex>
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	8e 0f       	add	r24, r30
 442:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <twi_masterBufferIndex>
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	ec 56       	subi	r30, 0x6C	; 108
 44a:	fe 4f       	sbci	r31, 0xFE	; 254
 44c:	80 81       	ld	r24, Z
 44e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 452:	85 ec       	ldi	r24, 0xC5	; 197
 454:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 458:	de c0       	rjmp	.+444    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
 45a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <twi_sendStop>
 45e:	88 23       	and	r24, r24
 460:	19 f0       	breq	.+6      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
          twi_stop();
 462:	0e 94 de 01 	call	0x3bc	; 0x3bc <twi_stop>
 466:	d7 c0       	rjmp	.+430    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
 46e:	84 ea       	ldi	r24, 0xA4	; 164
 470:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
 474:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <twi_state>
 478:	ce c0       	rjmp	.+412    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
 47a:	80 e2       	ldi	r24, 0x20	; 32
 47c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <twi_error>
      twi_stop();
 480:	0e 94 de 01 	call	0x3bc	; 0x3bc <twi_stop>
      break;
 484:	c8 c0       	rjmp	.+400    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
 486:	80 e3       	ldi	r24, 0x30	; 48
 488:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <twi_error>
      twi_stop();
 48c:	0e 94 de 01 	call	0x3bc	; 0x3bc <twi_stop>
      break;
 490:	c2 c0       	rjmp	.+388    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
 492:	88 e3       	ldi	r24, 0x38	; 56
 494:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <twi_error>
      twi_releaseBus();
 498:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <twi_releaseBus>
      break;
 49c:	bc c0       	rjmp	.+376    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 49e:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <twi_masterBufferIndex>
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	8e 0f       	add	r24, r30
 4a6:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <twi_masterBufferIndex>
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 4b0:	ec 56       	subi	r30, 0x6C	; 108
 4b2:	fe 4f       	sbci	r31, 0xFE	; 254
 4b4:	80 83       	st	Z, r24
	case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
 4b6:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <twi_masterBufferIndex>
 4ba:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <twi_masterBufferLength>
 4be:	98 17       	cp	r25, r24
 4c0:	20 f4       	brcc	.+8      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 4c2:	85 ec       	ldi	r24, 0xC5	; 197
 4c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 4c8:	a6 c0       	rjmp	.+332    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 4ca:	85 e8       	ldi	r24, 0x85	; 133
 4cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 4d0:	a2 c0       	rjmp	.+324    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 4d2:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <twi_masterBufferIndex>
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	8e 0f       	add	r24, r30
 4da:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <twi_masterBufferIndex>
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 4e4:	ec 56       	subi	r30, 0x6C	; 108
 4e6:	fe 4f       	sbci	r31, 0xFE	; 254
 4e8:	80 83       	st	Z, r24
	if (twi_sendStop)
 4ea:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <twi_sendStop>
 4ee:	88 23       	and	r24, r24
 4f0:	19 f0       	breq	.+6      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
          twi_stop();
 4f2:	0e 94 de 01 	call	0x3bc	; 0x3bc <twi_stop>
 4f6:	8f c0       	rjmp	.+286    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
 4fe:	84 ea       	ldi	r24, 0xA4	; 164
 500:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
 504:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <twi_state>
 508:	86 c0       	rjmp	.+268    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
 50a:	0e 94 de 01 	call	0x3bc	; 0x3bc <twi_stop>
      break;
 50e:	83 c0       	rjmp	.+262    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
 510:	83 e0       	ldi	r24, 0x03	; 3
 512:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
 516:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 51a:	85 ec       	ldi	r24, 0xC5	; 197
 51c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 520:	7a c0       	rjmp	.+244    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 522:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <twi_rxBufferIndex>
 526:	80 32       	cpi	r24, 0x20	; 32
 528:	a0 f4       	brcc	.+40     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
 52a:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <twi_rxBufferIndex>
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	8e 0f       	add	r24, r30
 532:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <twi_rxBufferIndex>
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	ee 0f       	add	r30, r30
 540:	ff 1f       	adc	r31, r31
 542:	e2 5f       	subi	r30, 0xF2	; 242
 544:	fe 4f       	sbci	r31, 0xFE	; 254
 546:	91 83       	std	Z+1, r25	; 0x01
 548:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 54a:	85 ec       	ldi	r24, 0xC5	; 197
 54c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 550:	62 c0       	rjmp	.+196    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 552:	85 e8       	ldi	r24, 0x85	; 133
 554:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 558:	5e c0       	rjmp	.+188    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
 55a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 55e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <twi_rxBufferIndex>
 562:	80 32       	cpi	r24, 0x20	; 32
 564:	48 f4       	brcc	.+18     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
 566:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <twi_rxBufferIndex>
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	ee 0f       	add	r30, r30
 56e:	ff 1f       	adc	r31, r31
 570:	e2 5f       	subi	r30, 0xF2	; 242
 572:	fe 4f       	sbci	r31, 0xFE	; 254
 574:	11 82       	std	Z+1, r1	; 0x01
 576:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
 578:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <twi_rxBufferIndex>
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <twi_onSlaveReceive>
 582:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <twi_onSlaveReceive+0x1>
 586:	8e e0       	ldi	r24, 0x0E	; 14
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
 58c:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <twi_rxBufferIndex>
      break;
 590:	42 c0       	rjmp	.+132    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 592:	85 e8       	ldi	r24, 0x85	; 133
 594:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 598:	3e c0       	rjmp	.+124    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
 59a:	84 e0       	ldi	r24, 0x04	; 4
 59c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
 5a0:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
 5a4:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
 5a8:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <twi_onSlaveTransmit>
 5ac:	f0 91 b6 01 	lds	r31, 0x01B6	; 0x8001b6 <twi_onSlaveTransmit+0x1>
 5b0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
 5b2:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <twi_txBufferLength>
 5b6:	81 11       	cpse	r24, r1
 5b8:	07 c0       	rjmp	.+14     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
        twi_txBufferLength = 1;
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
 5c0:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <twi_txBuffer+0x1>
 5c4:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
 5c8:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <twi_txBufferIndex>
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	8e 0f       	add	r24, r30
 5d0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <twi_txBufferIndex>
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	ee 0f       	add	r30, r30
 5d8:	ff 1f       	adc	r31, r31
 5da:	ed 5a       	subi	r30, 0xAD	; 173
 5dc:	fe 4f       	sbci	r31, 0xFE	; 254
 5de:	80 81       	ld	r24, Z
 5e0:	91 81       	ldd	r25, Z+1	; 0x01
 5e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 5e6:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <twi_txBufferIndex>
 5ea:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <twi_txBufferLength>
 5ee:	98 17       	cp	r25, r24
 5f0:	20 f4       	brcc	.+8      	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 5f2:	85 ec       	ldi	r24, 0xC5	; 197
 5f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 5f8:	0e c0       	rjmp	.+28     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 5fa:	85 e8       	ldi	r24, 0x85	; 133
 5fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 600:	0a c0       	rjmp	.+20     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 602:	85 ec       	ldi	r24, 0xC5	; 197
 604:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
 608:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <twi_state>
      break;
 60c:	04 c0       	rjmp	.+8      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
 60e:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <twi_error>
      twi_stop();
 612:	0e 94 de 01 	call	0x3bc	; 0x3bc <twi_stop>
      break;
  }
}
 616:	ff 91       	pop	r31
 618:	ef 91       	pop	r30
 61a:	bf 91       	pop	r27
 61c:	af 91       	pop	r26
 61e:	9f 91       	pop	r25
 620:	8f 91       	pop	r24
 622:	7f 91       	pop	r23
 624:	6f 91       	pop	r22
 626:	5f 91       	pop	r21
 628:	4f 91       	pop	r20
 62a:	3f 91       	pop	r19
 62c:	2f 91       	pop	r18
 62e:	0f 90       	pop	r0
 630:	0f be       	out	0x3f, r0	; 63
 632:	0f 90       	pop	r0
 634:	1f 90       	pop	r1
 636:	18 95       	reti

00000638 <initUSART>:
    Correspondingly, the macros will just be defined as UDR.
*/
#include "USART.h"

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 638:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  UBRR0L = UBRRL_VALUE;
 63c:	87 e6       	ldi	r24, 0x67	; 103
 63e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
 642:	e0 ec       	ldi	r30, 0xC0	; 192
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	8d 7f       	andi	r24, 0xFD	; 253
 64a:	80 83       	st	Z, r24
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 64c:	88 e1       	ldi	r24, 0x18	; 24
 64e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 652:	86 e0       	ldi	r24, 0x06	; 6
 654:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 658:	08 95       	ret

0000065a <onReceiveService>:
  twi_disable();
}

void setClock(uint32_t clock)
{
  twi_setFrequency(clock);
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	ec 01       	movw	r28, r24
 660:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <user_onReceive>
 664:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <user_onReceive+0x1>
 668:	30 97       	sbiw	r30, 0x00	; 0
 66a:	01 f1       	breq	.+64     	; 0x6ac <onReceiveService+0x52>
 66c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <rxBufferIndex>
 670:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rxBufferLength>
 674:	98 17       	cp	r25, r24
 676:	d0 f0       	brcs	.+52     	; 0x6ac <onReceiveService+0x52>
 678:	16 16       	cp	r1, r22
 67a:	17 06       	cpc	r1, r23
 67c:	8c f4       	brge	.+34     	; 0x6a0 <onReceiveService+0x46>
 67e:	20 e0       	ldi	r18, 0x00	; 0
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	de 01       	movw	r26, r28
 686:	a9 0f       	add	r26, r25
 688:	b1 1d       	adc	r27, r1
 68a:	4c 91       	ld	r20, X
 68c:	d9 01       	movw	r26, r18
 68e:	a8 54       	subi	r26, 0x48	; 72
 690:	be 4f       	sbci	r27, 0xFE	; 254
 692:	4c 93       	st	X, r20
 694:	9f 5f       	subi	r25, 0xFF	; 255
 696:	29 2f       	mov	r18, r25
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	26 17       	cp	r18, r22
 69c:	37 07       	cpc	r19, r23
 69e:	94 f3       	brlt	.-28     	; 0x684 <onReceiveService+0x2a>
 6a0:	cb 01       	movw	r24, r22
 6a2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rxBufferIndex>
 6a6:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <rxBufferLength>
 6aa:	09 95       	icall
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	08 95       	ret

000006b2 <onRequestService>:
 6b2:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <user_onRequest>
 6b6:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <user_onRequest+0x1>
 6ba:	30 97       	sbiw	r30, 0x00	; 0
 6bc:	29 f0       	breq	.+10     	; 0x6c8 <onRequestService+0x16>
 6be:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <txBufferIndex>
 6c2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <txBufferLength>
 6c6:	09 95       	icall
 6c8:	08 95       	ret

000006ca <beginAsMaster>:
 6ca:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rxBufferIndex>
 6ce:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rxBufferLength>
 6d2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <txBufferIndex>
 6d6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <txBufferLength>
 6da:	0e 94 22 01 	call	0x244	; 0x244 <twi_init>
 6de:	89 e5       	ldi	r24, 0x59	; 89
 6e0:	93 e0       	ldi	r25, 0x03	; 3
 6e2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <twi_attachSlaveTxEvent>
 6e6:	8d e2       	ldi	r24, 0x2D	; 45
 6e8:	93 e0       	ldi	r25, 0x03	; 3
 6ea:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <twi_attachSlaveRxEvent>
 6ee:	08 95       	ret

000006f0 <beginTransmission>:

//input:Device address without R/W bit
void beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
 6f0:	91 e0       	ldi	r25, 0x01	; 1
 6f2:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
  // set address of targeted slave
  txAddress = address;
 6f6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <txAddress>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 6fa:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <txBufferIndex>
  txBufferLength = 0;
 6fe:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <txBufferLength>
 702:	08 95       	ret

00000704 <endTransmission>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t endTransmission(uint8_t sendStop)
{
 704:	0f 93       	push	r16
 706:	1f 93       	push	r17
	// transmit buffer (blocking)
	uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
 708:	08 2f       	mov	r16, r24
 70a:	10 e0       	ldi	r17, 0x00	; 0
 70c:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <txBufferLength>
 710:	50 e0       	ldi	r21, 0x00	; 0
 712:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <txAddress>
 716:	21 e0       	ldi	r18, 0x01	; 1
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	68 ed       	ldi	r22, 0xD8	; 216
 71c:	71 e0       	ldi	r23, 0x01	; 1
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 3b 01 	call	0x276	; 0x276 <twi_writeTo>
	// reset tx buffer iterator vars
	txBufferIndex = 0;
 724:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <txBufferIndex>
	txBufferLength = 0;
 728:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <txBufferLength>
	// indicate that we are done transmitting
	transmitting = 0;
 72c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	return ret;
}
 730:	1f 91       	pop	r17
 732:	0f 91       	pop	r16
 734:	08 95       	ret

00000736 <endTransmissionThenStop>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t endTransmissionThenStop(void)
{
	return endTransmission(true);
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	0e 94 82 03 	call	0x704	; 0x704 <endTransmission>
}
 73c:	08 95       	ret

0000073e <write>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t write(uint8_t data)
{
 73e:	cf 93       	push	r28
 740:	df 93       	push	r29
 742:	1f 92       	push	r1
 744:	cd b7       	in	r28, 0x3d	; 61
 746:	de b7       	in	r29, 0x3e	; 62
 748:	89 83       	std	Y+1, r24	; 0x01
  if(transmitting){
 74a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 74e:	88 23       	and	r24, r24
 750:	a1 f0       	breq	.+40     	; 0x77a <write+0x3c>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 752:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <txBufferLength>
 756:	80 32       	cpi	r24, 0x20	; 32
 758:	c8 f4       	brcc	.+50     	; 0x78c <write+0x4e>
      
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 75a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <txBufferIndex>
 75e:	e8 2f       	mov	r30, r24
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	e8 52       	subi	r30, 0x28	; 40
 764:	fe 4f       	sbci	r31, 0xFE	; 254
 766:	99 81       	ldd	r25, Y+1	; 0x01
 768:	90 83       	st	Z, r25
    ++txBufferIndex;
 76a:	8f 5f       	subi	r24, 0xFF	; 255
 76c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <txBufferIndex>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
 770:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <txBufferLength>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0b c0       	rjmp	.+22     	; 0x790 <write+0x52>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
 77a:	61 e0       	ldi	r22, 0x01	; 1
 77c:	70 e0       	ldi	r23, 0x00	; 0
 77e:	ce 01       	movw	r24, r28
 780:	01 96       	adiw	r24, 0x01	; 1
 782:	0e 94 a6 01 	call	0x34c	; 0x34c <twi_transmit>
  }
  return 1;
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	02 c0       	rjmp	.+4      	; 0x790 <write+0x52>
  if(transmitting){
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
      
      return 0;
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	90 e0       	ldi	r25, 0x00	; 0
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
 790:	0f 90       	pop	r0
 792:	df 91       	pop	r29
 794:	cf 91       	pop	r28
 796:	08 95       	ret

00000798 <__tablejump2__>:
 798:	ee 0f       	add	r30, r30
 79a:	ff 1f       	adc	r31, r31
 79c:	05 90       	lpm	r0, Z+
 79e:	f4 91       	lpm	r31, Z
 7a0:	e0 2d       	mov	r30, r0
 7a2:	09 94       	ijmp

000007a4 <_exit>:
 7a4:	f8 94       	cli

000007a6 <__stop_program>:
 7a6:	ff cf       	rjmp	.-2      	; 0x7a6 <__stop_program>
