
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000aa8  00000b3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aa8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fb  00800110  00800110  00000b4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e17  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d5e  00000000  00000000  00002bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fae  00000000  00000000  00003929  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000514  00000000  00000000  000048d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000804  00000000  00000000  00004dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012b2  00000000  00000000  000055f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  000068a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__ctors_end>
   4:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
   8:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
   c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  10:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  14:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  18:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  1c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  20:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  24:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  28:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  2c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  30:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  34:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  38:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  3c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  40:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  44:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  48:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  4c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  50:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  54:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  58:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  5c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  60:	0c 94 bc 02 	jmp	0x578	; 0x578 <__vector_24>
  64:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  68:	d4 03       	fmuls	r21, r20
  6a:	d8 03       	fmulsu	r21, r16
  6c:	d8 03       	fmulsu	r21, r16
  6e:	d8 03       	fmulsu	r21, r16
  70:	d8 03       	fmulsu	r21, r16
  72:	d8 03       	fmulsu	r21, r16
  74:	d8 03       	fmulsu	r21, r16
  76:	d8 03       	fmulsu	r21, r16
  78:	dc 02       	muls	r29, r28
  7a:	d8 03       	fmulsu	r21, r16
  7c:	d8 03       	fmulsu	r21, r16
  7e:	d8 03       	fmulsu	r21, r16
  80:	d8 03       	fmulsu	r21, r16
  82:	d8 03       	fmulsu	r21, r16
  84:	d8 03       	fmulsu	r21, r16
  86:	d8 03       	fmulsu	r21, r16
  88:	dc 02       	muls	r29, r28
  8a:	d8 03       	fmulsu	r21, r16
  8c:	d8 03       	fmulsu	r21, r16
  8e:	d8 03       	fmulsu	r21, r16
  90:	d8 03       	fmulsu	r21, r16
  92:	d8 03       	fmulsu	r21, r16
  94:	d8 03       	fmulsu	r21, r16
  96:	d8 03       	fmulsu	r21, r16
  98:	e4 02       	muls	r30, r20
  9a:	d8 03       	fmulsu	r21, r16
  9c:	d8 03       	fmulsu	r21, r16
  9e:	d8 03       	fmulsu	r21, r16
  a0:	d8 03       	fmulsu	r21, r16
  a2:	d8 03       	fmulsu	r21, r16
  a4:	d8 03       	fmulsu	r21, r16
  a6:	d8 03       	fmulsu	r21, r16
  a8:	0a 03       	fmul	r16, r18
  aa:	d8 03       	fmulsu	r21, r16
  ac:	d8 03       	fmulsu	r21, r16
  ae:	d8 03       	fmulsu	r21, r16
  b0:	d8 03       	fmulsu	r21, r16
  b2:	d8 03       	fmulsu	r21, r16
  b4:	d8 03       	fmulsu	r21, r16
  b6:	d8 03       	fmulsu	r21, r16
  b8:	e4 02       	muls	r30, r20
  ba:	d8 03       	fmulsu	r21, r16
  bc:	d8 03       	fmulsu	r21, r16
  be:	d8 03       	fmulsu	r21, r16
  c0:	d8 03       	fmulsu	r21, r16
  c2:	d8 03       	fmulsu	r21, r16
  c4:	d8 03       	fmulsu	r21, r16
  c6:	d8 03       	fmulsu	r21, r16
  c8:	10 03       	mulsu	r17, r16
  ca:	d8 03       	fmulsu	r21, r16
  cc:	d8 03       	fmulsu	r21, r16
  ce:	d8 03       	fmulsu	r21, r16
  d0:	d8 03       	fmulsu	r21, r16
  d2:	d8 03       	fmulsu	r21, r16
  d4:	d8 03       	fmulsu	r21, r16
  d6:	d8 03       	fmulsu	r21, r16
  d8:	16 03       	mulsu	r17, r22
  da:	d8 03       	fmulsu	r21, r16
  dc:	d8 03       	fmulsu	r21, r16
  de:	d8 03       	fmulsu	r21, r16
  e0:	d8 03       	fmulsu	r21, r16
  e2:	d8 03       	fmulsu	r21, r16
  e4:	d8 03       	fmulsu	r21, r16
  e6:	d8 03       	fmulsu	r21, r16
  e8:	28 03       	fmul	r18, r16
  ea:	d8 03       	fmulsu	r21, r16
  ec:	d8 03       	fmulsu	r21, r16
  ee:	d8 03       	fmulsu	r21, r16
  f0:	d8 03       	fmulsu	r21, r16
  f2:	d8 03       	fmulsu	r21, r16
  f4:	d8 03       	fmulsu	r21, r16
  f6:	d8 03       	fmulsu	r21, r16
  f8:	52 03       	mulsu	r21, r18
  fa:	d8 03       	fmulsu	r21, r16
  fc:	d8 03       	fmulsu	r21, r16
  fe:	d8 03       	fmulsu	r21, r16
 100:	d8 03       	fmulsu	r21, r16
 102:	d8 03       	fmulsu	r21, r16
 104:	d8 03       	fmulsu	r21, r16
 106:	d8 03       	fmulsu	r21, r16
 108:	1c 03       	fmul	r17, r20
 10a:	d8 03       	fmulsu	r21, r16
 10c:	d8 03       	fmulsu	r21, r16
 10e:	d8 03       	fmulsu	r21, r16
 110:	d8 03       	fmulsu	r21, r16
 112:	d8 03       	fmulsu	r21, r16
 114:	d8 03       	fmulsu	r21, r16
 116:	d8 03       	fmulsu	r21, r16
 118:	36 03       	mulsu	r19, r22
 11a:	d8 03       	fmulsu	r21, r16
 11c:	d8 03       	fmulsu	r21, r16
 11e:	d8 03       	fmulsu	r21, r16
 120:	d8 03       	fmulsu	r21, r16
 122:	d8 03       	fmulsu	r21, r16
 124:	d8 03       	fmulsu	r21, r16
 126:	d8 03       	fmulsu	r21, r16
 128:	55 03       	mulsu	r21, r21
 12a:	d8 03       	fmulsu	r21, r16
 12c:	d8 03       	fmulsu	r21, r16
 12e:	d8 03       	fmulsu	r21, r16
 130:	d8 03       	fmulsu	r21, r16
 132:	d8 03       	fmulsu	r21, r16
 134:	d8 03       	fmulsu	r21, r16
 136:	d8 03       	fmulsu	r21, r16
 138:	55 03       	mulsu	r21, r21
 13a:	d8 03       	fmulsu	r21, r16
 13c:	d8 03       	fmulsu	r21, r16
 13e:	d8 03       	fmulsu	r21, r16
 140:	d8 03       	fmulsu	r21, r16
 142:	d8 03       	fmulsu	r21, r16
 144:	d8 03       	fmulsu	r21, r16
 146:	d8 03       	fmulsu	r21, r16
 148:	55 03       	mulsu	r21, r21
 14a:	d8 03       	fmulsu	r21, r16
 14c:	d8 03       	fmulsu	r21, r16
 14e:	d8 03       	fmulsu	r21, r16
 150:	d8 03       	fmulsu	r21, r16
 152:	d8 03       	fmulsu	r21, r16
 154:	d8 03       	fmulsu	r21, r16
 156:	d8 03       	fmulsu	r21, r16
 158:	55 03       	mulsu	r21, r21
 15a:	d8 03       	fmulsu	r21, r16
 15c:	d8 03       	fmulsu	r21, r16
 15e:	d8 03       	fmulsu	r21, r16
 160:	d8 03       	fmulsu	r21, r16
 162:	d8 03       	fmulsu	r21, r16
 164:	d8 03       	fmulsu	r21, r16
 166:	d8 03       	fmulsu	r21, r16
 168:	5e 03       	fmul	r21, r22
 16a:	d8 03       	fmulsu	r21, r16
 16c:	d8 03       	fmulsu	r21, r16
 16e:	d8 03       	fmulsu	r21, r16
 170:	d8 03       	fmulsu	r21, r16
 172:	d8 03       	fmulsu	r21, r16
 174:	d8 03       	fmulsu	r21, r16
 176:	d8 03       	fmulsu	r21, r16
 178:	96 03       	fmuls	r17, r22
 17a:	d8 03       	fmulsu	r21, r16
 17c:	d8 03       	fmulsu	r21, r16
 17e:	d8 03       	fmulsu	r21, r16
 180:	d8 03       	fmulsu	r21, r16
 182:	d8 03       	fmulsu	r21, r16
 184:	d8 03       	fmulsu	r21, r16
 186:	d8 03       	fmulsu	r21, r16
 188:	5e 03       	fmul	r21, r22
 18a:	d8 03       	fmulsu	r21, r16
 18c:	d8 03       	fmulsu	r21, r16
 18e:	d8 03       	fmulsu	r21, r16
 190:	d8 03       	fmulsu	r21, r16
 192:	d8 03       	fmulsu	r21, r16
 194:	d8 03       	fmulsu	r21, r16
 196:	d8 03       	fmulsu	r21, r16
 198:	96 03       	fmuls	r17, r22
 19a:	d8 03       	fmulsu	r21, r16
 19c:	d8 03       	fmulsu	r21, r16
 19e:	d8 03       	fmulsu	r21, r16
 1a0:	d8 03       	fmulsu	r21, r16
 1a2:	d8 03       	fmulsu	r21, r16
 1a4:	d8 03       	fmulsu	r21, r16
 1a6:	d8 03       	fmulsu	r21, r16
 1a8:	7a 03       	fmul	r23, r18
 1aa:	d8 03       	fmulsu	r21, r16
 1ac:	d8 03       	fmulsu	r21, r16
 1ae:	d8 03       	fmulsu	r21, r16
 1b0:	d8 03       	fmulsu	r21, r16
 1b2:	d8 03       	fmulsu	r21, r16
 1b4:	d8 03       	fmulsu	r21, r16
 1b6:	d8 03       	fmulsu	r21, r16
 1b8:	9a 03       	fmulsu	r17, r18
 1ba:	d8 03       	fmulsu	r21, r16
 1bc:	d8 03       	fmulsu	r21, r16
 1be:	d8 03       	fmulsu	r21, r16
 1c0:	d8 03       	fmulsu	r21, r16
 1c2:	d8 03       	fmulsu	r21, r16
 1c4:	d8 03       	fmulsu	r21, r16
 1c6:	d8 03       	fmulsu	r21, r16
 1c8:	9a 03       	fmulsu	r17, r18
 1ca:	d8 03       	fmulsu	r21, r16
 1cc:	d8 03       	fmulsu	r21, r16
 1ce:	d8 03       	fmulsu	r21, r16
 1d0:	d8 03       	fmulsu	r21, r16
 1d2:	d8 03       	fmulsu	r21, r16
 1d4:	d8 03       	fmulsu	r21, r16
 1d6:	d8 03       	fmulsu	r21, r16
 1d8:	b1 03       	fmuls	r19, r17
 1da:	d8 03       	fmulsu	r21, r16
 1dc:	d8 03       	fmulsu	r21, r16
 1de:	d8 03       	fmulsu	r21, r16
 1e0:	d8 03       	fmulsu	r21, r16
 1e2:	d8 03       	fmulsu	r21, r16
 1e4:	d8 03       	fmulsu	r21, r16
 1e6:	d8 03       	fmulsu	r21, r16
 1e8:	ce 03       	fmulsu	r20, r22
 1ea:	d8 03       	fmulsu	r21, r16
 1ec:	d8 03       	fmulsu	r21, r16
 1ee:	d8 03       	fmulsu	r21, r16
 1f0:	d8 03       	fmulsu	r21, r16
 1f2:	d8 03       	fmulsu	r21, r16
 1f4:	d8 03       	fmulsu	r21, r16
 1f6:	d8 03       	fmulsu	r21, r16
 1f8:	ce 03       	fmulsu	r20, r22

000001fa <__ctors_end>:
 1fa:	11 24       	eor	r1, r1
 1fc:	1f be       	out	0x3f, r1	; 63
 1fe:	cf ef       	ldi	r28, 0xFF	; 255
 200:	d8 e0       	ldi	r29, 0x08	; 8
 202:	de bf       	out	0x3e, r29	; 62
 204:	cd bf       	out	0x3d, r28	; 61

00000206 <__do_copy_data>:
 206:	11 e0       	ldi	r17, 0x01	; 1
 208:	a0 e0       	ldi	r26, 0x00	; 0
 20a:	b1 e0       	ldi	r27, 0x01	; 1
 20c:	e8 ea       	ldi	r30, 0xA8	; 168
 20e:	fa e0       	ldi	r31, 0x0A	; 10
 210:	02 c0       	rjmp	.+4      	; 0x216 <__do_copy_data+0x10>
 212:	05 90       	lpm	r0, Z+
 214:	0d 92       	st	X+, r0
 216:	a0 31       	cpi	r26, 0x10	; 16
 218:	b1 07       	cpc	r27, r17
 21a:	d9 f7       	brne	.-10     	; 0x212 <__do_copy_data+0xc>

0000021c <__do_clear_bss>:
 21c:	22 e0       	ldi	r18, 0x02	; 2
 21e:	a0 e1       	ldi	r26, 0x10	; 16
 220:	b1 e0       	ldi	r27, 0x01	; 1
 222:	01 c0       	rjmp	.+2      	; 0x226 <.do_clear_bss_start>

00000224 <.do_clear_bss_loop>:
 224:	1d 92       	st	X+, r1

00000226 <.do_clear_bss_start>:
 226:	ab 30       	cpi	r26, 0x0B	; 11
 228:	b2 07       	cpc	r27, r18
 22a:	e1 f7       	brne	.-8      	; 0x224 <.do_clear_bss_loop>
 22c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <main>
 230:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <_exit>

00000234 <__bad_interrupt>:
 234:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000238 <writeTo>:
	int x = (((int)_buff2[0]) << 8) | _buff[0];
	printString("x: ");
	printBinaryByte( x );
	
}
void writeTo(uint8_t address, uint8_t val) {
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	d8 2f       	mov	r29, r24
 23e:	c6 2f       	mov	r28, r22
	beginTransmission(DEVICE); // start transmission to device
 240:	83 e5       	ldi	r24, 0x53	; 83
 242:	0e 94 83 04 	call	0x906	; 0x906 <beginTransmission>
	write(address); // send register address
 246:	8d 2f       	mov	r24, r29
 248:	0e 94 aa 04 	call	0x954	; 0x954 <write>
	write(val); // send value to write
 24c:	8c 2f       	mov	r24, r28
 24e:	0e 94 aa 04 	call	0x954	; 0x954 <write>
	endTransmissionThenStop(); // end transmission
 252:	0e 94 a6 04 	call	0x94c	; 0x94c <endTransmissionThenStop>
}
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <readFrom>:
// Reads num uint8_ts starting from address register on device in to _buff array
void readFrom(uint8_t address, int num, uint8_t _buff[]) {
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	d8 2f       	mov	r29, r24
 266:	c6 2f       	mov	r28, r22
 268:	04 2f       	mov	r16, r20
 26a:	15 2f       	mov	r17, r21
	beginTransmission(DEVICE); // start transmission to device
 26c:	83 e5       	ldi	r24, 0x53	; 83
 26e:	0e 94 83 04 	call	0x906	; 0x906 <beginTransmission>
	write(address); // sends address to read from
 272:	8d 2f       	mov	r24, r29
 274:	0e 94 aa 04 	call	0x954	; 0x954 <write>
	endTransmissionThenStop(); // end transmission
 278:	0e 94 a6 04 	call	0x94c	; 0x94c <endTransmissionThenStop>
	beginTransmission(DEVICE); // start transmission to device
 27c:	83 e5       	ldi	r24, 0x53	; 83
 27e:	0e 94 83 04 	call	0x906	; 0x906 <beginTransmission>
	requestFrom(DEVICE, num); // request num uint8_ts from device
 282:	6c 2f       	mov	r22, r28
 284:	83 e5       	ldi	r24, 0x53	; 83
 286:	0e 94 23 05 	call	0xa46	; 0xa46 <requestFrom>
 28a:	c0 2f       	mov	r28, r16
 28c:	d1 2f       	mov	r29, r17
	int i = 0;
	while(available()) // device may send less than requested (abnormal)
 28e:	03 c0       	rjmp	.+6      	; 0x296 <readFrom+0x3a>
	{
		_buff[i] = read(); // receive a uint8_t
 290:	0e 94 38 05 	call	0xa70	; 0xa70 <read>
 294:	89 93       	st	Y+, r24
	write(address); // sends address to read from
	endTransmissionThenStop(); // end transmission
	beginTransmission(DEVICE); // start transmission to device
	requestFrom(DEVICE, num); // request num uint8_ts from device
	int i = 0;
	while(available()) // device may send less than requested (abnormal)
 296:	0e 94 30 05 	call	0xa60	; 0xa60 <available>
 29a:	89 2b       	or	r24, r25
 29c:	c9 f7       	brne	.-14     	; 0x290 <readFrom+0x34>
	{
		_buff[i] = read(); // receive a uint8_t
		i++;
	}
	endTransmissionThenStop(); // end transmission
 29e:	0e 94 a6 04 	call	0x94c	; 0x94c <endTransmissionThenStop>
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <readAccel>:
	readAccel(); // read the x/y/z tilt
	_delay_ms(500); // only read every 0,5 seconds
}
}

void readAccel() {
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
	uint8_t howManyuint8_tsToRead = 1;
	readFrom( DATAX0, howManyuint8_tsToRead, _buff); //read the acceleration data from the ADXL345
 2b0:	48 e1       	ldi	r20, 0x18	; 24
 2b2:	51 e0       	ldi	r21, 0x01	; 1
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <DATAX0>
 2bc:	0e 94 2e 01 	call	0x25c	; 0x25c <readFrom>
	readFrom( DATAX1, howManyuint8_tsToRead, _buff2); //read the acceleration data from the ADXL345
 2c0:	49 e1       	ldi	r20, 0x19	; 25
 2c2:	51 e0       	ldi	r21, 0x01	; 1
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <DATAX1>
 2cc:	0e 94 2e 01 	call	0x25c	; 0x25c <readFrom>
	// each axis reading comes in 10 bit resolution, ie 2 uint8_ts. Least Significat uint8_t first!!
	// thus we are converting both uint8_ts in to one int
	int x = (((int)_buff2[0]) << 8) | _buff[0];
 2d0:	c0 91 19 01 	lds	r28, 0x0119	; 0x800119 <_buff2>
 2d4:	d0 e0       	ldi	r29, 0x00	; 0
 2d6:	dc 2f       	mov	r29, r28
 2d8:	cc 27       	eor	r28, r28
 2da:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_buff>
 2de:	c8 2b       	or	r28, r24
	printString("x: ");
 2e0:	84 e0       	ldi	r24, 0x04	; 4
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 02 04 	call	0x804	; 0x804 <printString>
	printBinaryByte( x );
 2e8:	8c 2f       	mov	r24, r28
 2ea:	0e 94 18 04 	call	0x830	; 0x830 <printBinaryByte>
	
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <main>:
void readAccel();
void writeTo(uint8_t address, uint8_t val) ;
void readFrom(uint8_t address, int num, uint8_t _buff[]) ;
int main()
{
	beginAsMaster(); // join i2c bus (address optional for master)
 2f4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <beginAsMaster>
	sei();
 2f8:	78 94       	sei
	initUSART();
 2fa:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <initUSART>
	printString("init \n");
 2fe:	88 e0       	ldi	r24, 0x08	; 8
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0e 94 02 04 	call	0x804	; 0x804 <printString>
	//Put the ADXL345 into +/- 4G range by writing the value 0x01 to the DATA_FORMAT register.
	writeTo(DATA_FORMAT, 0x01);
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <DATA_FORMAT>
 30c:	0e 94 1c 01 	call	0x238	; 0x238 <writeTo>
	//Put the ADXL345 into Measurement Mode by writing 0x08 to the POWER_CTL register.
	writeTo(POWER_CTL, 0x08);
 310:	68 e0       	ldi	r22, 0x08	; 8
 312:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <POWER_CTL>
 316:	0e 94 1c 01 	call	0x238	; 0x238 <writeTo>
while(1)
{
	readAccel(); // read the x/y/z tilt
 31a:	0e 94 56 01 	call	0x2ac	; 0x2ac <readAccel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31e:	2f ef       	ldi	r18, 0xFF	; 255
 320:	89 e6       	ldi	r24, 0x69	; 105
 322:	98 e1       	ldi	r25, 0x18	; 24
 324:	21 50       	subi	r18, 0x01	; 1
 326:	80 40       	sbci	r24, 0x00	; 0
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <main+0x30>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x3a>
 32e:	00 00       	nop
 330:	f4 cf       	rjmp	.-24     	; 0x31a <main+0x26>

00000332 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 332:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <twi_state>
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <twi_sendStop>
 33c:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <twi_inRepStart>
 340:	88 b1       	in	r24, 0x08	; 8
 342:	80 63       	ori	r24, 0x30	; 48
 344:	88 b9       	out	0x08, r24	; 8
 346:	e9 eb       	ldi	r30, 0xB9	; 185
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	8e 7f       	andi	r24, 0xFE	; 254
 34e:	80 83       	st	Z, r24
 350:	80 81       	ld	r24, Z
 352:	8d 7f       	andi	r24, 0xFD	; 253
 354:	80 83       	st	Z, r24
 356:	88 e4       	ldi	r24, 0x48	; 72
 358:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 35c:	85 e4       	ldi	r24, 0x45	; 69
 35e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 362:	08 95       	ret

00000364 <twi_readFrom>:
 364:	41 32       	cpi	r20, 0x21	; 33
 366:	08 f0       	brcs	.+2      	; 0x36a <twi_readFrom+0x6>
 368:	50 c0       	rjmp	.+160    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 36a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <twi_state>
 36e:	91 11       	cpse	r25, r1
 370:	fc cf       	rjmp	.-8      	; 0x36a <twi_readFrom+0x6>
 372:	31 e0       	ldi	r19, 0x01	; 1
 374:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <twi_state>
 378:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <twi_sendStop>
 37c:	2f ef       	ldi	r18, 0xFF	; 255
 37e:	20 93 63 01 	sts	0x0163, r18	; 0x800163 <twi_error>
 382:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <twi_masterBufferIndex>
 386:	24 0f       	add	r18, r20
 388:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <twi_masterBufferLength>
 38c:	30 93 ca 01 	sts	0x01CA, r19	; 0x8001ca <twi_slarw>
 390:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <twi_slarw>
 394:	88 0f       	add	r24, r24
 396:	82 2b       	or	r24, r18
 398:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <twi_slarw>
 39c:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <twi_inRepStart>
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	81 f4       	brne	.+32     	; 0x3c4 <twi_readFrom+0x60>
 3a4:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <twi_inRepStart>
 3a8:	ab eb       	ldi	r26, 0xBB	; 187
 3aa:	b0 e0       	ldi	r27, 0x00	; 0
 3ac:	ec eb       	ldi	r30, 0xBC	; 188
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <twi_slarw>
 3b4:	8c 93       	st	X, r24
 3b6:	80 81       	ld	r24, Z
 3b8:	83 fd       	sbrc	r24, 3
 3ba:	fa cf       	rjmp	.-12     	; 0x3b0 <twi_readFrom+0x4c>
 3bc:	85 ec       	ldi	r24, 0xC5	; 197
 3be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3c2:	03 c0       	rjmp	.+6      	; 0x3ca <twi_readFrom+0x66>
 3c4:	85 ee       	ldi	r24, 0xE5	; 229
 3c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3ca:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <twi_state>
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	e1 f3       	breq	.-8      	; 0x3ca <twi_readFrom+0x66>
 3d2:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <twi_masterBufferIndex>
 3d6:	84 17       	cp	r24, r20
 3d8:	10 f4       	brcc	.+4      	; 0x3de <twi_readFrom+0x7a>
 3da:	40 91 c7 01 	lds	r20, 0x01C7	; 0x8001c7 <twi_masterBufferIndex>
 3de:	44 23       	and	r20, r20
 3e0:	a9 f0       	breq	.+42     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3e2:	e6 2f       	mov	r30, r22
 3e4:	f7 2f       	mov	r31, r23
 3e6:	6f ef       	ldi	r22, 0xFF	; 255
 3e8:	64 0f       	add	r22, r20
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	6f 5f       	subi	r22, 0xFF	; 255
 3ee:	7f 4f       	sbci	r23, 0xFF	; 255
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	dc 01       	movw	r26, r24
 3f6:	a9 55       	subi	r26, 0x59	; 89
 3f8:	be 4f       	sbci	r27, 0xFE	; 254
 3fa:	2c 91       	ld	r18, X
 3fc:	21 93       	st	Z+, r18
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	86 17       	cp	r24, r22
 402:	97 07       	cpc	r25, r23
 404:	b9 f7       	brne	.-18     	; 0x3f4 <twi_readFrom+0x90>
 406:	94 2f       	mov	r25, r20
 408:	01 c0       	rjmp	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	89 2f       	mov	r24, r25
 40e:	08 95       	ret

00000410 <twi_writeTo>:
 410:	0f 93       	push	r16
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	41 32       	cpi	r20, 0x21	; 33
 418:	08 f0       	brcs	.+2      	; 0x41c <twi_writeTo+0xc>
 41a:	5b c0       	rjmp	.+182    	; 0x4d2 <twi_writeTo+0xc2>
 41c:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <twi_state>
 420:	31 11       	cpse	r19, r1
 422:	fc cf       	rjmp	.-8      	; 0x41c <twi_writeTo+0xc>
 424:	92 e0       	ldi	r25, 0x02	; 2
 426:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <twi_state>
 42a:	00 93 65 01 	sts	0x0165, r16	; 0x800165 <twi_sendStop>
 42e:	9f ef       	ldi	r25, 0xFF	; 255
 430:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <twi_error>
 434:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <twi_masterBufferIndex>
 438:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <twi_masterBufferLength>
 43c:	44 23       	and	r20, r20
 43e:	91 f0       	breq	.+36     	; 0x464 <twi_writeTo+0x54>
 440:	eb 01       	movw	r28, r22
 442:	41 50       	subi	r20, 0x01	; 1
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	4f 5f       	subi	r20, 0xFF	; 255
 448:	5f 4f       	sbci	r21, 0xFF	; 255
 44a:	46 0f       	add	r20, r22
 44c:	57 1f       	adc	r21, r23
 44e:	fb 01       	movw	r30, r22
 450:	df 01       	movw	r26, r30
 452:	ac 1b       	sub	r26, r28
 454:	bd 0b       	sbc	r27, r29
 456:	91 91       	ld	r25, Z+
 458:	a9 55       	subi	r26, 0x59	; 89
 45a:	be 4f       	sbci	r27, 0xFE	; 254
 45c:	9c 93       	st	X, r25
 45e:	e4 17       	cp	r30, r20
 460:	f5 07       	cpc	r31, r21
 462:	b1 f7       	brne	.-20     	; 0x450 <twi_writeTo+0x40>
 464:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <twi_slarw>
 468:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <twi_slarw>
 46c:	88 0f       	add	r24, r24
 46e:	89 2b       	or	r24, r25
 470:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <twi_slarw>
 474:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <twi_inRepStart>
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	81 f4       	brne	.+32     	; 0x49c <twi_writeTo+0x8c>
 47c:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <twi_inRepStart>
 480:	ab eb       	ldi	r26, 0xBB	; 187
 482:	b0 e0       	ldi	r27, 0x00	; 0
 484:	ec eb       	ldi	r30, 0xBC	; 188
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <twi_slarw>
 48c:	8c 93       	st	X, r24
 48e:	80 81       	ld	r24, Z
 490:	83 fd       	sbrc	r24, 3
 492:	fa cf       	rjmp	.-12     	; 0x488 <twi_writeTo+0x78>
 494:	85 ec       	ldi	r24, 0xC5	; 197
 496:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 49a:	03 c0       	rjmp	.+6      	; 0x4a2 <twi_writeTo+0x92>
 49c:	85 ee       	ldi	r24, 0xE5	; 229
 49e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 4a2:	22 23       	and	r18, r18
 4a4:	41 f0       	breq	.+16     	; 0x4b6 <twi_writeTo+0xa6>
 4a6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <twi_state>
 4aa:	82 30       	cpi	r24, 0x02	; 2
 4ac:	21 f4       	brne	.+8      	; 0x4b6 <twi_writeTo+0xa6>
 4ae:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <twi_state>
 4b2:	82 30       	cpi	r24, 0x02	; 2
 4b4:	e1 f3       	breq	.-8      	; 0x4ae <twi_writeTo+0x9e>
 4b6:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <twi_error>
 4ba:	8f 3f       	cpi	r24, 0xFF	; 255
 4bc:	79 f0       	breq	.+30     	; 0x4dc <twi_writeTo+0xcc>
 4be:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <twi_error>
 4c2:	80 32       	cpi	r24, 0x20	; 32
 4c4:	41 f0       	breq	.+16     	; 0x4d6 <twi_writeTo+0xc6>
 4c6:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <twi_error>
 4ca:	80 33       	cpi	r24, 0x30	; 48
 4cc:	31 f0       	breq	.+12     	; 0x4da <twi_writeTo+0xca>
 4ce:	34 e0       	ldi	r19, 0x04	; 4
 4d0:	05 c0       	rjmp	.+10     	; 0x4dc <twi_writeTo+0xcc>
 4d2:	31 e0       	ldi	r19, 0x01	; 1
 4d4:	03 c0       	rjmp	.+6      	; 0x4dc <twi_writeTo+0xcc>
 4d6:	32 e0       	ldi	r19, 0x02	; 2
 4d8:	01 c0       	rjmp	.+2      	; 0x4dc <twi_writeTo+0xcc>
 4da:	33 e0       	ldi	r19, 0x03	; 3
 4dc:	83 2f       	mov	r24, r19
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	0f 91       	pop	r16
 4e4:	08 95       	ret

000004e6 <twi_transmit>:
 4e6:	40 91 64 01 	lds	r20, 0x0164	; 0x800164 <twi_txBufferLength>
 4ea:	26 2f       	mov	r18, r22
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	24 0f       	add	r18, r20
 4f0:	31 1d       	adc	r19, r1
 4f2:	21 32       	cpi	r18, 0x21	; 33
 4f4:	31 05       	cpc	r19, r1
 4f6:	0c f5       	brge	.+66     	; 0x53a <twi_transmit+0x54>
 4f8:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <twi_state>
 4fc:	24 30       	cpi	r18, 0x04	; 4
 4fe:	f9 f4       	brne	.+62     	; 0x53e <twi_transmit+0x58>
 500:	66 23       	and	r22, r22
 502:	a1 f0       	breq	.+40     	; 0x52c <twi_transmit+0x46>
 504:	a8 2f       	mov	r26, r24
 506:	b9 2f       	mov	r27, r25
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <twi_txBufferLength>
 510:	fc 01       	movw	r30, r24
 512:	e2 0f       	add	r30, r18
 514:	f1 1d       	adc	r31, r1
 516:	2d 91       	ld	r18, X+
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	ee 0f       	add	r30, r30
 51c:	ff 1f       	adc	r31, r31
 51e:	ea 59       	subi	r30, 0x9A	; 154
 520:	fe 4f       	sbci	r31, 0xFE	; 254
 522:	31 83       	std	Z+1, r19	; 0x01
 524:	20 83       	st	Z, r18
 526:	01 96       	adiw	r24, 0x01	; 1
 528:	86 17       	cp	r24, r22
 52a:	80 f3       	brcs	.-32     	; 0x50c <twi_transmit+0x26>
 52c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <twi_txBufferLength>
 530:	68 0f       	add	r22, r24
 532:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <twi_txBufferLength>
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	08 95       	ret
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	08 95       	ret
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	08 95       	ret

00000542 <twi_attachSlaveRxEvent>:
 542:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <twi_onSlaveReceive+0x1>
 546:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <twi_onSlaveReceive>
 54a:	08 95       	ret

0000054c <twi_attachSlaveTxEvent>:
 54c:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <twi_onSlaveTransmit+0x1>
 550:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <twi_onSlaveTransmit>
 554:	08 95       	ret

00000556 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
 556:	85 ed       	ldi	r24, 0xD5	; 213
 558:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
 55c:	ec eb       	ldi	r30, 0xBC	; 188
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	80 81       	ld	r24, Z
 562:	84 fd       	sbrc	r24, 4
 564:	fd cf       	rjmp	.-6      	; 0x560 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
 566:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <twi_state>
 56a:	08 95       	ret

0000056c <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
 56c:	85 ec       	ldi	r24, 0xC5	; 197
 56e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
 572:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <twi_state>
 576:	08 95       	ret

00000578 <__vector_24>:
}

ISR(TWI_vect)
{
 578:	1f 92       	push	r1
 57a:	0f 92       	push	r0
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	0f 92       	push	r0
 580:	11 24       	eor	r1, r1
 582:	2f 93       	push	r18
 584:	3f 93       	push	r19
 586:	4f 93       	push	r20
 588:	5f 93       	push	r21
 58a:	6f 93       	push	r22
 58c:	7f 93       	push	r23
 58e:	8f 93       	push	r24
 590:	9f 93       	push	r25
 592:	af 93       	push	r26
 594:	bf 93       	push	r27
 596:	ef 93       	push	r30
 598:	ff 93       	push	r31
  switch(TW_STATUS){
 59a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 59e:	e8 2f       	mov	r30, r24
 5a0:	e8 7f       	andi	r30, 0xF8	; 248
 5a2:	8e 2f       	mov	r24, r30
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	89 3c       	cpi	r24, 0xC9	; 201
 5a8:	91 05       	cpc	r25, r1
 5aa:	08 f0       	brcs	.+2      	; 0x5ae <__vector_24+0x36>
 5ac:	01 c1       	rjmp	.+514    	; 0x7b0 <__vector_24+0x238>
 5ae:	fc 01       	movw	r30, r24
 5b0:	ec 5c       	subi	r30, 0xCC	; 204
 5b2:	ff 4f       	sbci	r31, 0xFF	; 255
 5b4:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
 5b8:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <twi_slarw>
 5bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 5c0:	85 ec       	ldi	r24, 0xC5	; 197
 5c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 5c6:	f4 c0       	rjmp	.+488    	; 0x7b0 <__vector_24+0x238>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
 5c8:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <twi_masterBufferIndex>
 5cc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <twi_masterBufferLength>
 5d0:	98 17       	cp	r25, r24
 5d2:	80 f4       	brcc	.+32     	; 0x5f4 <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 5d4:	e0 91 c7 01 	lds	r30, 0x01C7	; 0x8001c7 <twi_masterBufferIndex>
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	8e 0f       	add	r24, r30
 5dc:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <twi_masterBufferIndex>
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	e9 55       	subi	r30, 0x59	; 89
 5e4:	fe 4f       	sbci	r31, 0xFE	; 254
 5e6:	80 81       	ld	r24, Z
 5e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 5ec:	85 ec       	ldi	r24, 0xC5	; 197
 5ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 5f2:	de c0       	rjmp	.+444    	; 0x7b0 <__vector_24+0x238>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
 5f4:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <twi_sendStop>
 5f8:	88 23       	and	r24, r24
 5fa:	19 f0       	breq	.+6      	; 0x602 <__vector_24+0x8a>
          twi_stop();
 5fc:	0e 94 ab 02 	call	0x556	; 0x556 <twi_stop>
 600:	d7 c0       	rjmp	.+430    	; 0x7b0 <__vector_24+0x238>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
 608:	84 ea       	ldi	r24, 0xA4	; 164
 60a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
 60e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <twi_state>
 612:	ce c0       	rjmp	.+412    	; 0x7b0 <__vector_24+0x238>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
 614:	80 e2       	ldi	r24, 0x20	; 32
 616:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <twi_error>
      twi_stop();
 61a:	0e 94 ab 02 	call	0x556	; 0x556 <twi_stop>
      break;
 61e:	c8 c0       	rjmp	.+400    	; 0x7b0 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
 620:	80 e3       	ldi	r24, 0x30	; 48
 622:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <twi_error>
      twi_stop();
 626:	0e 94 ab 02 	call	0x556	; 0x556 <twi_stop>
      break;
 62a:	c2 c0       	rjmp	.+388    	; 0x7b0 <__vector_24+0x238>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
 62c:	88 e3       	ldi	r24, 0x38	; 56
 62e:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <twi_error>
      twi_releaseBus();
 632:	0e 94 b6 02 	call	0x56c	; 0x56c <twi_releaseBus>
      break;
 636:	bc c0       	rjmp	.+376    	; 0x7b0 <__vector_24+0x238>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 638:	e0 91 c7 01 	lds	r30, 0x01C7	; 0x8001c7 <twi_masterBufferIndex>
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	8e 0f       	add	r24, r30
 640:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <twi_masterBufferIndex>
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 64a:	e9 55       	subi	r30, 0x59	; 89
 64c:	fe 4f       	sbci	r31, 0xFE	; 254
 64e:	80 83       	st	Z, r24
	case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
 650:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <twi_masterBufferIndex>
 654:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <twi_masterBufferLength>
 658:	98 17       	cp	r25, r24
 65a:	20 f4       	brcc	.+8      	; 0x664 <__vector_24+0xec>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 65c:	85 ec       	ldi	r24, 0xC5	; 197
 65e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 662:	a6 c0       	rjmp	.+332    	; 0x7b0 <__vector_24+0x238>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 664:	85 e8       	ldi	r24, 0x85	; 133
 666:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 66a:	a2 c0       	rjmp	.+324    	; 0x7b0 <__vector_24+0x238>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 66c:	e0 91 c7 01 	lds	r30, 0x01C7	; 0x8001c7 <twi_masterBufferIndex>
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	8e 0f       	add	r24, r30
 674:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <twi_masterBufferIndex>
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 67e:	e9 55       	subi	r30, 0x59	; 89
 680:	fe 4f       	sbci	r31, 0xFE	; 254
 682:	80 83       	st	Z, r24
	if (twi_sendStop)
 684:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <twi_sendStop>
 688:	88 23       	and	r24, r24
 68a:	19 f0       	breq	.+6      	; 0x692 <__vector_24+0x11a>
          twi_stop();
 68c:	0e 94 ab 02 	call	0x556	; 0x556 <twi_stop>
 690:	8f c0       	rjmp	.+286    	; 0x7b0 <__vector_24+0x238>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
 698:	84 ea       	ldi	r24, 0xA4	; 164
 69a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
 69e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <twi_state>
 6a2:	86 c0       	rjmp	.+268    	; 0x7b0 <__vector_24+0x238>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
 6a4:	0e 94 ab 02 	call	0x556	; 0x556 <twi_stop>
      break;
 6a8:	83 c0       	rjmp	.+262    	; 0x7b0 <__vector_24+0x238>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
 6aa:	83 e0       	ldi	r24, 0x03	; 3
 6ac:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
 6b0:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <twi_rxBufferIndex>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 6b4:	85 ec       	ldi	r24, 0xC5	; 197
 6b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 6ba:	7a c0       	rjmp	.+244    	; 0x7b0 <__vector_24+0x238>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 6bc:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <twi_rxBufferIndex>
 6c0:	80 32       	cpi	r24, 0x20	; 32
 6c2:	a0 f4       	brcc	.+40     	; 0x6ec <__vector_24+0x174>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
 6c4:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <twi_rxBufferIndex>
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	8e 0f       	add	r24, r30
 6cc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <twi_rxBufferIndex>
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	ee 0f       	add	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	ef 5d       	subi	r30, 0xDF	; 223
 6de:	fe 4f       	sbci	r31, 0xFE	; 254
 6e0:	91 83       	std	Z+1, r25	; 0x01
 6e2:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 6e4:	85 ec       	ldi	r24, 0xC5	; 197
 6e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 6ea:	62 c0       	rjmp	.+196    	; 0x7b0 <__vector_24+0x238>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 6ec:	85 e8       	ldi	r24, 0x85	; 133
 6ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 6f2:	5e c0       	rjmp	.+188    	; 0x7b0 <__vector_24+0x238>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
 6f4:	0e 94 b6 02 	call	0x56c	; 0x56c <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 6f8:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <twi_rxBufferIndex>
 6fc:	80 32       	cpi	r24, 0x20	; 32
 6fe:	48 f4       	brcc	.+18     	; 0x712 <__vector_24+0x19a>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
 700:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <twi_rxBufferIndex>
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	ee 0f       	add	r30, r30
 708:	ff 1f       	adc	r31, r31
 70a:	ef 5d       	subi	r30, 0xDF	; 223
 70c:	fe 4f       	sbci	r31, 0xFE	; 254
 70e:	11 82       	std	Z+1, r1	; 0x01
 710:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
 712:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <twi_rxBufferIndex>
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <twi_onSlaveReceive>
 71c:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <twi_onSlaveReceive+0x1>
 720:	81 e2       	ldi	r24, 0x21	; 33
 722:	91 e0       	ldi	r25, 0x01	; 1
 724:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
 726:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <twi_rxBufferIndex>
      break;
 72a:	42 c0       	rjmp	.+132    	; 0x7b0 <__vector_24+0x238>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 72c:	85 e8       	ldi	r24, 0x85	; 133
 72e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 732:	3e c0       	rjmp	.+124    	; 0x7b0 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
 734:	84 e0       	ldi	r24, 0x04	; 4
 736:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
 73a:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
 73e:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
 742:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <twi_onSlaveTransmit>
 746:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <twi_onSlaveTransmit+0x1>
 74a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
 74c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <twi_txBufferLength>
 750:	81 11       	cpse	r24, r1
 752:	07 c0       	rjmp	.+14     	; 0x762 <__vector_24+0x1ea>
        twi_txBufferLength = 1;
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
 75a:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <twi_txBuffer+0x1>
 75e:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
 762:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <twi_txBufferIndex>
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	8e 0f       	add	r24, r30
 76a:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <twi_txBufferIndex>
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	ee 0f       	add	r30, r30
 772:	ff 1f       	adc	r31, r31
 774:	ea 59       	subi	r30, 0x9A	; 154
 776:	fe 4f       	sbci	r31, 0xFE	; 254
 778:	80 81       	ld	r24, Z
 77a:	91 81       	ldd	r25, Z+1	; 0x01
 77c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 780:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <twi_txBufferIndex>
 784:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <twi_txBufferLength>
 788:	98 17       	cp	r25, r24
 78a:	20 f4       	brcc	.+8      	; 0x794 <__vector_24+0x21c>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 78c:	85 ec       	ldi	r24, 0xC5	; 197
 78e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 792:	0e c0       	rjmp	.+28     	; 0x7b0 <__vector_24+0x238>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 794:	85 e8       	ldi	r24, 0x85	; 133
 796:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 79a:	0a c0       	rjmp	.+20     	; 0x7b0 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 79c:	85 ec       	ldi	r24, 0xC5	; 197
 79e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
 7a2:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <twi_state>
      break;
 7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
 7a8:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <twi_error>
      twi_stop();
 7ac:	0e 94 ab 02 	call	0x556	; 0x556 <twi_stop>
      break;
  }
}
 7b0:	ff 91       	pop	r31
 7b2:	ef 91       	pop	r30
 7b4:	bf 91       	pop	r27
 7b6:	af 91       	pop	r26
 7b8:	9f 91       	pop	r25
 7ba:	8f 91       	pop	r24
 7bc:	7f 91       	pop	r23
 7be:	6f 91       	pop	r22
 7c0:	5f 91       	pop	r21
 7c2:	4f 91       	pop	r20
 7c4:	3f 91       	pop	r19
 7c6:	2f 91       	pop	r18
 7c8:	0f 90       	pop	r0
 7ca:	0f be       	out	0x3f, r0	; 63
 7cc:	0f 90       	pop	r0
 7ce:	1f 90       	pop	r1
 7d0:	18 95       	reti

000007d2 <initUSART>:
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
  transmitByte('0' + (word % 10));                             /* Ones */
}
 7d2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 7d6:	87 e6       	ldi	r24, 0x67	; 103
 7d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 7dc:	e0 ec       	ldi	r30, 0xC0	; 192
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	80 81       	ld	r24, Z
 7e2:	8d 7f       	andi	r24, 0xFD	; 253
 7e4:	80 83       	st	Z, r24
 7e6:	88 e1       	ldi	r24, 0x18	; 24
 7e8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 7ec:	86 e0       	ldi	r24, 0x06	; 6
 7ee:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 7f2:	08 95       	ret

000007f4 <transmitByte>:
 7f4:	e0 ec       	ldi	r30, 0xC0	; 192
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	90 81       	ld	r25, Z
 7fa:	95 ff       	sbrs	r25, 5
 7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <transmitByte+0x4>
 7fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 802:	08 95       	ret

00000804 <printString>:
 804:	0f 93       	push	r16
 806:	1f 93       	push	r17
 808:	cf 93       	push	r28
 80a:	fc 01       	movw	r30, r24
 80c:	80 81       	ld	r24, Z
 80e:	88 23       	and	r24, r24
 810:	59 f0       	breq	.+22     	; 0x828 <printString+0x24>
 812:	8f 01       	movw	r16, r30
 814:	c0 e0       	ldi	r28, 0x00	; 0
 816:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <transmitByte>
 81a:	cf 5f       	subi	r28, 0xFF	; 255
 81c:	f8 01       	movw	r30, r16
 81e:	ec 0f       	add	r30, r28
 820:	f1 1d       	adc	r31, r1
 822:	80 81       	ld	r24, Z
 824:	81 11       	cpse	r24, r1
 826:	f7 cf       	rjmp	.-18     	; 0x816 <printString+0x12>
 828:	cf 91       	pop	r28
 82a:	1f 91       	pop	r17
 82c:	0f 91       	pop	r16
 82e:	08 95       	ret

00000830 <printBinaryByte>:

void printBinaryByte(uint8_t byte) {
 830:	1f 93       	push	r17
 832:	cf 93       	push	r28
 834:	df 93       	push	r29
 836:	1f 92       	push	r1
 838:	cd b7       	in	r28, 0x3d	; 61
 83a:	de b7       	in	r29, 0x3e	; 62
 83c:	89 83       	std	Y+1, r24	; 0x01
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 83e:	17 e0       	ldi	r17, 0x07	; 7
    if (bit_is_set(byte, bit))
 840:	89 81       	ldd	r24, Y+1	; 0x01
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	01 2e       	mov	r0, r17
 846:	02 c0       	rjmp	.+4      	; 0x84c <printBinaryByte+0x1c>
 848:	95 95       	asr	r25
 84a:	87 95       	ror	r24
 84c:	0a 94       	dec	r0
 84e:	e2 f7       	brpl	.-8      	; 0x848 <printBinaryByte+0x18>
 850:	80 ff       	sbrs	r24, 0
 852:	04 c0       	rjmp	.+8      	; 0x85c <printBinaryByte+0x2c>
      transmitByte('1');
 854:	81 e3       	ldi	r24, 0x31	; 49
 856:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <transmitByte>
 85a:	03 c0       	rjmp	.+6      	; 0x862 <printBinaryByte+0x32>
    else
      transmitByte('0');
 85c:	80 e3       	ldi	r24, 0x30	; 48
 85e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <transmitByte>
}

void printBinaryByte(uint8_t byte) {
                       /* Prints out a byte as a series of 1's and 0's */
  uint8_t bit;
  for (bit = 7; bit < 255; bit--) {
 862:	11 50       	subi	r17, 0x01	; 1
 864:	68 f7       	brcc	.-38     	; 0x840 <printBinaryByte+0x10>
    if (bit_is_set(byte, bit))
      transmitByte('1');
    else
      transmitByte('0');
  }
}
 866:	0f 90       	pop	r0
 868:	df 91       	pop	r29
 86a:	cf 91       	pop	r28
 86c:	1f 91       	pop	r17
 86e:	08 95       	ret

00000870 <onReceiveService>:
  }
  return quantity;
}
 size_t writeUL(unsigned long n) { return write((uint8_t)n); }
 size_t writeL(long n) { return write((uint8_t)n); }
 size_t writeU(unsigned int n) { return write((uint8_t)n); }
 870:	cf 93       	push	r28
 872:	df 93       	push	r29
 874:	ec 01       	movw	r28, r24
 876:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <user_onReceive>
 87a:	f0 91 1c 01 	lds	r31, 0x011C	; 0x80011c <user_onReceive+0x1>
 87e:	30 97       	sbiw	r30, 0x00	; 0
 880:	01 f1       	breq	.+64     	; 0x8c2 <onReceiveService+0x52>
 882:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <rxBufferIndex>
 886:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <rxBufferLength>
 88a:	98 17       	cp	r25, r24
 88c:	d0 f0       	brcs	.+52     	; 0x8c2 <onReceiveService+0x52>
 88e:	16 16       	cp	r1, r22
 890:	17 06       	cpc	r1, r23
 892:	8c f4       	brge	.+34     	; 0x8b6 <onReceiveService+0x46>
 894:	20 e0       	ldi	r18, 0x00	; 0
 896:	30 e0       	ldi	r19, 0x00	; 0
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	de 01       	movw	r26, r28
 89c:	a9 0f       	add	r26, r25
 89e:	b1 1d       	adc	r27, r1
 8a0:	4c 91       	ld	r20, X
 8a2:	d9 01       	movw	r26, r18
 8a4:	a5 53       	subi	r26, 0x35	; 53
 8a6:	be 4f       	sbci	r27, 0xFE	; 254
 8a8:	4c 93       	st	X, r20
 8aa:	9f 5f       	subi	r25, 0xFF	; 255
 8ac:	29 2f       	mov	r18, r25
 8ae:	30 e0       	ldi	r19, 0x00	; 0
 8b0:	26 17       	cp	r18, r22
 8b2:	37 07       	cpc	r19, r23
 8b4:	94 f3       	brlt	.-28     	; 0x89a <onReceiveService+0x2a>
 8b6:	cb 01       	movw	r24, r22
 8b8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <rxBufferIndex>
 8bc:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <rxBufferLength>
 8c0:	09 95       	icall
 8c2:	df 91       	pop	r29
 8c4:	cf 91       	pop	r28
 8c6:	08 95       	ret

000008c8 <onRequestService>:
 8c8:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <user_onRequest>
 8cc:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <user_onRequest+0x1>
 8d0:	30 97       	sbiw	r30, 0x00	; 0
 8d2:	29 f0       	breq	.+10     	; 0x8de <onRequestService+0x16>
 8d4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <txBufferIndex>
 8d8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <txBufferLength>
 8dc:	09 95       	icall
 8de:	08 95       	ret

000008e0 <beginAsMaster>:
 8e0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <rxBufferIndex>
 8e4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <rxBufferLength>
 8e8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <txBufferIndex>
 8ec:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <txBufferLength>
 8f0:	0e 94 99 01 	call	0x332	; 0x332 <twi_init>
 8f4:	84 e6       	ldi	r24, 0x64	; 100
 8f6:	94 e0       	ldi	r25, 0x04	; 4
 8f8:	0e 94 a6 02 	call	0x54c	; 0x54c <twi_attachSlaveTxEvent>
 8fc:	88 e3       	ldi	r24, 0x38	; 56
 8fe:	94 e0       	ldi	r25, 0x04	; 4
 900:	0e 94 a1 02 	call	0x542	; 0x542 <twi_attachSlaveRxEvent>
 904:	08 95       	ret

00000906 <beginTransmission>:
 906:	91 e0       	ldi	r25, 0x01	; 1
 908:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <__data_end>
 90c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <txAddress>
 910:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <txBufferIndex>
 914:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <txBufferLength>
 918:	08 95       	ret

0000091a <endTransmission>:
 91a:	0f 93       	push	r16
 91c:	1f 93       	push	r17
 91e:	08 2f       	mov	r16, r24
 920:	10 e0       	ldi	r17, 0x00	; 0
 922:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <txBufferLength>
 926:	50 e0       	ldi	r21, 0x00	; 0
 928:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <txAddress>
 92c:	21 e0       	ldi	r18, 0x01	; 1
 92e:	30 e0       	ldi	r19, 0x00	; 0
 930:	6b ee       	ldi	r22, 0xEB	; 235
 932:	71 e0       	ldi	r23, 0x01	; 1
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 94 08 02 	call	0x410	; 0x410 <twi_writeTo>
 93a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <txBufferIndex>
 93e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <txBufferLength>
 942:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 946:	1f 91       	pop	r17
 948:	0f 91       	pop	r16
 94a:	08 95       	ret

0000094c <endTransmissionThenStop>:
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	0e 94 8d 04 	call	0x91a	; 0x91a <endTransmission>
 952:	08 95       	ret

00000954 <write>:
 954:	cf 93       	push	r28
 956:	df 93       	push	r29
 958:	1f 92       	push	r1
 95a:	cd b7       	in	r28, 0x3d	; 61
 95c:	de b7       	in	r29, 0x3e	; 62
 95e:	89 83       	std	Y+1, r24	; 0x01
 960:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 964:	88 23       	and	r24, r24
 966:	a1 f0       	breq	.+40     	; 0x990 <write+0x3c>
 968:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <txBufferLength>
 96c:	80 32       	cpi	r24, 0x20	; 32
 96e:	c8 f4       	brcc	.+50     	; 0x9a2 <write+0x4e>
 970:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <txBufferIndex>
 974:	e8 2f       	mov	r30, r24
 976:	f0 e0       	ldi	r31, 0x00	; 0
 978:	e5 51       	subi	r30, 0x15	; 21
 97a:	fe 4f       	sbci	r31, 0xFE	; 254
 97c:	99 81       	ldd	r25, Y+1	; 0x01
 97e:	90 83       	st	Z, r25
 980:	8f 5f       	subi	r24, 0xFF	; 255
 982:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <txBufferIndex>
 986:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <txBufferLength>
 98a:	81 e0       	ldi	r24, 0x01	; 1
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0b c0       	rjmp	.+22     	; 0x9a6 <write+0x52>
 990:	61 e0       	ldi	r22, 0x01	; 1
 992:	70 e0       	ldi	r23, 0x00	; 0
 994:	ce 01       	movw	r24, r28
 996:	01 96       	adiw	r24, 0x01	; 1
 998:	0e 94 73 02 	call	0x4e6	; 0x4e6 <twi_transmit>
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <write+0x52>
 9a2:	80 e0       	ldi	r24, 0x00	; 0
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	0f 90       	pop	r0
 9a8:	df 91       	pop	r29
 9aa:	cf 91       	pop	r28
 9ac:	08 95       	ret

000009ae <requestFromComplete>:
 9ae:	8f 92       	push	r8
 9b0:	9f 92       	push	r9
 9b2:	af 92       	push	r10
 9b4:	bf 92       	push	r11
 9b6:	ef 92       	push	r14
 9b8:	0f 93       	push	r16
 9ba:	1f 93       	push	r17
 9bc:	cf 93       	push	r28
 9be:	df 93       	push	r29
 9c0:	18 2f       	mov	r17, r24
 9c2:	d6 2f       	mov	r29, r22
 9c4:	49 01       	movw	r8, r18
 9c6:	5a 01       	movw	r10, r20
 9c8:	00 23       	and	r16, r16
 9ca:	09 f1       	breq	.+66     	; 0xa0e <requestFromComplete+0x60>
 9cc:	0e 94 83 04 	call	0x906	; 0x906 <beginTransmission>
 9d0:	04 30       	cpi	r16, 0x04	; 4
 9d2:	08 f0       	brcs	.+2      	; 0x9d6 <requestFromComplete+0x28>
 9d4:	03 e0       	ldi	r16, 0x03	; 3
 9d6:	cf ef       	ldi	r28, 0xFF	; 255
 9d8:	c0 0f       	add	r28, r16
 9da:	00 23       	and	r16, r16
 9dc:	a9 f0       	breq	.+42     	; 0xa08 <requestFromComplete+0x5a>
 9de:	8c 2f       	mov	r24, r28
 9e0:	88 0f       	add	r24, r24
 9e2:	88 0f       	add	r24, r24
 9e4:	88 0f       	add	r24, r24
 9e6:	a5 01       	movw	r20, r10
 9e8:	94 01       	movw	r18, r8
 9ea:	04 c0       	rjmp	.+8      	; 0x9f4 <requestFromComplete+0x46>
 9ec:	56 95       	lsr	r21
 9ee:	47 95       	ror	r20
 9f0:	37 95       	ror	r19
 9f2:	27 95       	ror	r18
 9f4:	8a 95       	dec	r24
 9f6:	d2 f7       	brpl	.-12     	; 0x9ec <requestFromComplete+0x3e>
 9f8:	da 01       	movw	r26, r20
 9fa:	c9 01       	movw	r24, r18
 9fc:	0e 94 aa 04 	call	0x954	; 0x954 <write>
 a00:	8c 2f       	mov	r24, r28
 a02:	c1 50       	subi	r28, 0x01	; 1
 a04:	81 11       	cpse	r24, r1
 a06:	eb cf       	rjmp	.-42     	; 0x9de <requestFromComplete+0x30>
 a08:	80 e0       	ldi	r24, 0x00	; 0
 a0a:	0e 94 8d 04 	call	0x91a	; 0x91a <endTransmission>
 a0e:	2e 2d       	mov	r18, r14
 a10:	30 e0       	ldi	r19, 0x00	; 0
 a12:	6d 2f       	mov	r22, r29
 a14:	d1 32       	cpi	r29, 0x21	; 33
 a16:	08 f0       	brcs	.+2      	; 0xa1a <requestFromComplete+0x6c>
 a18:	60 e2       	ldi	r22, 0x20	; 32
 a1a:	46 2f       	mov	r20, r22
 a1c:	50 e0       	ldi	r21, 0x00	; 0
 a1e:	6b ec       	ldi	r22, 0xCB	; 203
 a20:	71 e0       	ldi	r23, 0x01	; 1
 a22:	81 2f       	mov	r24, r17
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	0e 94 b2 01 	call	0x364	; 0x364 <twi_readFrom>
 a2a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <rxBufferIndex>
 a2e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <rxBufferLength>
 a32:	df 91       	pop	r29
 a34:	cf 91       	pop	r28
 a36:	1f 91       	pop	r17
 a38:	0f 91       	pop	r16
 a3a:	ef 90       	pop	r14
 a3c:	bf 90       	pop	r11
 a3e:	af 90       	pop	r10
 a40:	9f 90       	pop	r9
 a42:	8f 90       	pop	r8
 a44:	08 95       	ret

00000a46 <requestFrom>:
 a46:	ef 92       	push	r14
 a48:	0f 93       	push	r16
 a4a:	ee 24       	eor	r14, r14
 a4c:	e3 94       	inc	r14
 a4e:	00 e0       	ldi	r16, 0x00	; 0
 a50:	20 e0       	ldi	r18, 0x00	; 0
 a52:	30 e0       	ldi	r19, 0x00	; 0
 a54:	a9 01       	movw	r20, r18
 a56:	0e 94 d7 04 	call	0x9ae	; 0x9ae <requestFromComplete>
 a5a:	0f 91       	pop	r16
 a5c:	ef 90       	pop	r14
 a5e:	08 95       	ret

00000a60 <available>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int available(void)
{
  return rxBufferLength - rxBufferIndex;
 a60:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <rxBufferLength>
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <rxBufferIndex>
}
 a6a:	82 1b       	sub	r24, r18
 a6c:	91 09       	sbc	r25, r1
 a6e:	08 95       	ret

00000a70 <read>:
int read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 a70:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <rxBufferIndex>
 a74:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <rxBufferLength>
 a78:	98 17       	cp	r25, r24
 a7a:	50 f4       	brcc	.+20     	; 0xa90 <read+0x20>
    value = rxBuffer[rxBufferIndex];
 a7c:	e9 2f       	mov	r30, r25
 a7e:	f0 e0       	ldi	r31, 0x00	; 0
 a80:	e5 53       	subi	r30, 0x35	; 53
 a82:	fe 4f       	sbci	r31, 0xFE	; 254
 a84:	20 81       	ld	r18, Z
 a86:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
 a88:	9f 5f       	subi	r25, 0xFF	; 255
 a8a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <rxBufferIndex>
 a8e:	02 c0       	rjmp	.+4      	; 0xa94 <read+0x24>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int read(void)
{
  int value = -1;
 a90:	2f ef       	ldi	r18, 0xFF	; 255
 a92:	3f ef       	ldi	r19, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
 a94:	c9 01       	movw	r24, r18
 a96:	08 95       	ret

00000a98 <__tablejump2__>:
 a98:	ee 0f       	add	r30, r30
 a9a:	ff 1f       	adc	r31, r31
 a9c:	05 90       	lpm	r0, Z+
 a9e:	f4 91       	lpm	r31, Z
 aa0:	e0 2d       	mov	r30, r0
 aa2:	09 94       	ijmp

00000aa4 <_exit>:
 aa4:	f8 94       	cli

00000aa6 <__stop_program>:
 aa6:	ff cf       	rjmp	.-2      	; 0xaa6 <__stop_program>
